---
- hosts: localhost
  tasks:
    - name: Remove old version of docker
      yum:
        name: "{{ item }}"
        state: absent
      with_items:
        - docker
        - docker.io
        - docker-common
        
    - name: Install docker dependencies
      yum:
        name: "{{ item }}"
        update_cache: yes
        state: latest
      with_items:
        - curl
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - git
        - make
        
    - name: install docker repo
      shell: |
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        
    - name: Install Docker-CE
      yum:
        name: docker-ce
        update_cache: yes
        state: present

    - name: Start and enable docker service
      service:
        name: docker
        state: started
        enabled: yes
    
    - name: install pip
      easy_install:
        name: pip
        state: latest
        
    - name: install docker for python
      pip:
        name: "{{ item }}"
        state: latest
        extra_args: --ignore-installed
      with_items:
       - docker

    - name: download weavescope
      get_url:
        url: https://git.io/scope
        dest: /usr/local/bin/scope
        mode: 0755
        
    - name: launch weavescope
      shell: |
        /usr/local/bin/scope launch
      ignore_errors: yes        
 
    - name: create conjur docker network
      docker_network:
        name: conjur
        state: present
        
    - name: create conjur docker volume
      docker_volume:
        name: "{{ item }}"
        state: present
      with_items:
       - conjur_cert
       - jenkins_api
    
    - name: Load Conjur tar
      docker_image:
        name: conjur-appliance
        load_path: ../conjur.tar
        state: present
    
    - name: Start conjur container
      docker_container:
        name: conjur-master
        image: registry2.itci.conjur.net/conjur-appliance:5.0-stable
        state: started
        privileged: yes
        recreate: yes
        networks:
         - name: conjur
        published_ports:
         - "443:443"
        volumes:
         - "conjur_cert:/opt/conjur/etc/ssl"
        restart_policy: always

    - name: configure conjur container
      shell: |
        docker exec conjur-master evoke configure master -h conjur-master -p Cyberark1 cyberark

    - name: Start Conjur CLI
      docker_container:
        name: conjur-cli
        image: cyberark/conjur-cli:5-6.1.0
        state: started
        volumes:
         - "../policy:/policy"
         - "jenkins_api:/jenkins_api"
        restart_policy: always
        networks:
         - name: conjur
        recreate: yes
        entrypoint: []
        command: ["sleep", "infinity"]
    
    - name: configure cli
      shell: |
        docker exec conjur-cli bash -c "conjur init -u https://conjur-master -a cyberark <<< yes"
        docker exec conjur-cli conjur authn login -u admin -p Cyberark1
        docker exec conjur-cli bash -c "conjur policy load --replace root /policy/policy.yaml"
        docker exec conjur-cli bash -c "conjur hostfactory tokens create --duration-days=9999 jenkins > /jenkins_api/hostfactory"
    
    - name: randomizing variables
      shell: |
        docker exec conjur-cli conjur variable values add shared_secret_auth/helloworld_secret $(openssl rand -hex 12)
        docker exec conjur-cli conjur variable values add shared_secret_auth/database_password $(openssl rand -hex 12)
        docker exec conjur-cli conjur variable values add shared_secret_auth/web_config_password $(openssl rand -hex 12)
        docker exec conjur-cli conjur variable values add shared_secret_auth/systema_root_sshkey $(openssl rand -hex 12)
        docker exec conjur-cli conjur variable values add shared_secret_auth/systemb_root_sshkey $(openssl rand -hex 12)
        docker exec conjur-cli conjur variable values add shared_secret_auth/aws_access_key $(openssl rand -hex 12)
        docker exec conjur-cli conjur variable values add shared_secret_auth/aws_secret_key $(openssl rand -hex 12)
   
    - name: Start Jenkins  
      docker_container:
        name: jenkins
        image: jenkins/jenkins
        state: started
        user: root
        env:
          JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"
        published_ports: 
         - "8080:8080" 
        networks:
         - name: conjur
        volumes:
         - "/var/run/docker.sock:/var/run/docker.sock"
         - "../scripts:/scripts"
         - "../jenkins_identity:/jenkins_identity"    
         - "jenkins_api:/jenkins_api"
        restart_policy: always
        recreate: yes
        
    - name: install jenkins plugins
      shell: |
        docker exec jenkins sh -c 'xargs /usr/local/bin/install-plugins.sh < /scripts/plugins.txt' || true
        docker container restart jenkins

    - name: install conjur summon into jenkins
      shell: |
        docker exec jenkins bash -c "apt-get install sudo jq -y"
        docker exec jenkins bash -c "curl -sSL https://raw.githubusercontent.com/cyberark/summon/master/install.sh | bash"
        docker exec jenkins bash -c "curl -sSL https://raw.githubusercontent.com/cyberark/summon-conjur/master/install.sh | bash"

    - name: install docker into jenkins
      shell: |
        docker exec jenkins bash -c "curl -fsSL get.docker.com -o get-docker.sh && sh get-docker.sh"
        docker exec jenkins bash -c "usermod -aG docker jenkins"

    - name: start gitlab
      docker_container:
        name: gitlab
        image: gitlab/gitlab-ce:latest
        state: started
        restart_policy: always
        recreate: yes
        hostname: gitlab
        networks:
         - name: conjur
        published_ports:
         - "7070:80"
        volumes:
         - "/srv/gitlab/config:/etc/gitlab"
         - "/srv/gitlab/logs:/var/log/gitlab"
         - "/srv/gitlab/data:/var/opt/gitlab"

    - name: download awx
      git:
        dest: /opt/awx
        clone: yes
        repo: https://github.com/ansible/awx.git

    - name: start up awx
      shell: ansible-playbook -i inventory install.yml
      args:
        chdir: /opt/awx/installer

    - name: connect instances to docker network
      shell: |
        docker network connect conjur awx_web
        docker network connect conjur awx_task
